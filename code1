import random
import numpy as np
from scipy.optimize import Bounds, minimize


#%% t=T-1=3

num_numbers = 10
lower_bound = 0.5
upper_bound = 1.5
s=0
gamma=0.3
v=0.9

def generate_random_numbers(num, lower_bound, upper_bound):
    return [random.uniform(lower_bound, upper_bound) for _ in range(num)]

def V_3(x, R1, R2, Ct_previous, Yt):
    ut_previous, dt = x  # Unpack the variables
    random_R1 = generate_random_numbers(num_numbers, R1-0.2, R1+0.2)
    random_R2 = generate_random_numbers(num_numbers, R2-0.2, R2+0.2)
    expectation_3 = sum(1/gamma*((ut_previous*random_R1[i]+(1-ut_previous)*random_R2[i])*(Ct_previous+Yt-dt))**gamma for i in range(num_numbers)) / num_numbers

    ValueFunc_3 = 1/gamma*(dt)**gamma + expectation_3
    
    return -1*ValueFunc_3

Ct_range3 = range(1000, 1300, 1)
Yt_range3 = range(10, 50, 1)
R1_range3 = [round(i, 2) for i in np.arange(0.5, 1.51, 0.1)] #to be simulated
R2_range3 = [round(i, 2) for i in np.arange(0.5, 1.51, 0.1)]

optimal_control_list3 = []

for Ct_previous in Ct_range3:
    for Yt in Yt_range3:
        for R1 in R1_range3:
            for R2 in R2_range3:
                bounds = Bounds([0, 0], [1, Yt])
                initial_guess = [0.5, 50]
                result = minimize(V_3, initial_guess, args=(R1, R2, Ct_previous, Yt), method='L-BFGS-B', bounds=bounds)
                optimal_x1, optimal_x2 = result.x
                optimal_control_list3.append((optimal_x1, optimal_x2))

# approximate u_3, d_3 as func of state variables,approximate V_3 as a function of state and control variables
